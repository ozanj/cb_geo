---
title: 'Structuring College Access'
subtitle: 'The Market Segment Model and College Board Geomarkets'
author: ['Ozan Jaquette', 'Karina Salazar', 'Crystal Han']
institute: ['UCLA', 'University of Arizona', 'Stanford University']
bibliography: ./assets/bib/cb_geomarket_bib.bib
format:
  revealjs: 
    theme: [default, ./assets/css/custom.scss]
    controls: true
    controls-layout: bottom-right
    controls-tutorial: true
    transition: slide
    background-transition: fade
    auto-stretch: false
    slide-level: 3
    menu:
      titleSelector: 'h1, h2, .slide:not(.hide) h3'
      useTextContentForMissingTitles: false
      hideMissingTitles: true
    template-partials:
      - ./assets/html/title-slide.html
include-in-header: ./assets/html/header.html
---


# Introduction

### Introduction
#### Talent is everywhere, but structure allocates talent to unequal opportunities

College Board "Geomarkets"

- Carve states and metropolitan areas into smaller geographic regions meant to define local recruiting markets

POP OUT OF GEOMARKETS

- Chicago
- New York

Geomarkets are an input to two College Board products

- Enrollment Planning Service:
- Student Search Service:

**Research questions** focus on metropolitan areas

1. What is SES and racial variation between, within geomarkets? How does this change over time?
1. What is SES and racial composition of included vs. excluded prospects, if student list purchases filter on particular Geomarkets?

### New York and Chicago Geomarkets

::: columns
::: {.column width="40%"}

![](./assets/images/nyc_geomarkets.png)
:::

::: {.column width="60%"}

![](./assets/images/chicago_geomarkets.png)
:::
:::

## Level-2 heading

### Level-3 heading

### Level-3 heading {.hide}
#### Level-4 subheading

# Empirical Context

# Theory
### Test map

<iframe src="https://comforting-kashata-600ce0.netlify.app/" width=100% height=100% allowtransparency="true"></iframe>

# Results

```{r setup, echo=FALSE, results = 'asis'}

library(tidyverse)
library(kableExtra)  # For collapse_rows() to work
library(tools)

knitr::opts_chunk$set(echo = F, message = F)

# Example directories
graphs_dir <- file.path(".", "results", "graphs")

# 1) Define the `insert_figure` helper function
insert_figure <- function(rq, metro, graph_type, base_path = graphs_dir) {

  # Convert spaces -> underscores for filenames
  metro_underscored <- str_replace_all(metro, " ", "_")

  # Build the three file paths (PNG, title TXT, note TXT)
  fig_file  <- file.path(base_path, rq, str_c(rq, "_", metro_underscored, "_", graph_type, ".png"))
  cap_file  <- file.path(base_path, rq, str_c(rq, "_", metro_underscored, "_", graph_type, "_title.txt"))
  note_file <- file.path(base_path, rq, str_c(rq, "_", metro_underscored, "_", graph_type, "_note.txt"))

  # Print a heading / caption
  caption_text <- if (file.exists(cap_file)) readLines(cap_file, warn = FALSE) else "No Title Found"
  writeLines(paste0("#### ", caption_text))

  # Output the figure (if it exists)
  if (file.exists(fig_file)) {
    writeLines(str_c("![](", fig_file, ")\n"))
  } else {
    writeLines(paste("*(Missing figure file:", fig_file, ")*\n"))
  }

  # Print footnotes (if the .txt file exists)
  if (file.exists(note_file)) {
    notes_txt <- readLines(note_file, warn = FALSE)
    writeLines(
      str_c(
        "<div class=\"footnote\">",
        paste0(notes_txt, collapse = "</br>"),
        "</div>"
      )
    )
  }
}

# 2) Define your metros / RQs
metros <- c(
  "atlanta",
  "bay area",
  "boston",
  "chicago",
  "cleveland",
  "dallas",
  "dc maryland virginia",
  "detroit",
  "houston",
  "long island",
  "los angeles",
  "miami",
  "new york city",
  "northern new jersey",
  "orange county",
  "philadelphia",
  "san diego"
)

rqs <- c("rq1", "rq2")

# For RQ1, we have two plot types: "race" and "ses"
graph_types_rq1 <- c("race", "ses")

# For RQ2, we have two plot types: "race" and "firstgen"
graph_types_rq2 <- c("race", "firstgen")

# 3) Subset of metros with RQ2 data (2 orders each)
rq2_metros <- c(
  "chicago", "philadelphia", "los angeles", 
  "orange county", "san diego", "bay area",
  "northern new jersey","long island",'detroit','dallas','houston'
)

# We'll define a "metro_orders" list for those RQ2 metros:
metro_orders <- list(
  "chicago"             = c("487984", "488035_488053"),
  "philadelphia"        = c("448922", "448427_448440"),
  "northern_new_jersey" = c("448922", "448427_448440"),
  "long_island"         = c("448922", "448427_448440"),
  "detroit"             = c("448922", "448427_448440"),
  "dallas"              = c("448922", "448427_448440"),
  "los_angeles"         = c("448375", "448374_448420"),
  "orange_county"       = c("448375", "448374_448420"),
  "san_diego"           = c("448375", "448374_448420"),
  "bay_area"            = c("448375", "448374_448420"),
  'houston'             = c('329702') #   # houston = c('houston', 'houston_eps_codes', 'PSAT score 1010 - 1520', '329702')

)

# 4) Main loop
for (m in metros) {

  # Print a top-level heading for the metro area
  writeLines(str_c("## ", tools::toTitleCase(m), " area"))

  for (rq in rqs) {
    
    # For clarity, parse out the numeric portion
    rq_num <- str_replace(string = rq, pattern = "rq", replacement = "")

    # ---------------------------------------------
    # RQ1 Logic
    # ---------------------------------------------
    if (rq == "rq1") {

      # Each metro has 2 plots: "race" & "ses"
      for (i in seq(graph_types_rq1)) {
        g <- graph_types_rq1[i]

        writeLines(str_c("### Research question ", rq_num, if_else(i == 1, "", " {.hide}")))
        insert_figure(rq = rq, metro = m, graph_type = g)
      }

    # ---------------------------------------------
    # RQ2 Logic (row vs. col approach + race_by_firstgen)
    # ---------------------------------------------
    } else if (rq == "rq2") {

      # Only run RQ2 code if the metro is in our RQ2 list
      if (!(m %in% rq2_metros)) next

      # Convert name -> underscores for matching list keys
      m_underscored <- str_replace_all(m, " ", "_")
      orders_for_m  <- metro_orders[[m_underscored]]

      # If a metro isn't in the list or has no orders, skip
      if (is.null(orders_for_m)) next

      # We'll do 2 group types: race & firstgen
      for (i in seq(graph_types_rq2)) {
        g <- graph_types_rq2[i]

        # We'll do row and col for each group type
        for (rc in c("row", "col")) {

          if (rc == "row") {
            #
            # ROW => single combined figure on one slide
            #
            writeLines(str_c("### Research question ", rq_num, if_else(i == 1, "", " {.hide}")))
            graph_type_row <- str_c(g, "_", rc, "_plot")
            insert_figure(rq = rq, metro = m, graph_type = graph_type_row)

          } else {
            #
            # COL => separate file(s) by order ID => each on its own slide
            #
            for (order_id in orders_for_m) {
              
              # Each order ID gets its own "###" => new Reveal.js slide
              writeLines(str_c("### Research question ", rq_num, " {.hide}"))
              
              # e.g. "rq2_chicago_race_col_plot_487984.png"
              graph_type_col <- str_c(g, "_", rc, "_plot_", order_id)
              insert_figure(rq = rq, metro = m, graph_type = graph_type_col)
            }
            
          } # end if (row vs col)

        } # end rc loop
        
      } # end g loop

      # -------------------------------------------
      # ADDITIONAL: race_by_firstgen for each order
      # -------------------------------------------
      # Like the column approach, one slide per order_id
      for (order_id in orders_for_m) {
        writeLines(str_c("### Research question ", rq_num, rq_num, " {.hide}"))
        # Filenames look like:
        #   rq2_northern_new_jersey_order_448922_race_by_firstgen.png
        graph_type_rbf <- str_c("order_", order_id, "_race_by_firstgen")
        insert_figure(rq = rq, metro = m, graph_type = graph_type_rbf)
      }

    } # end if (rq == "rq2")

  } # end rq loop

} # end metros loop

```

# Discussion



### References

::: {#refs}
:::
